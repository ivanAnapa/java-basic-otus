package ru.otus.homeworks.lesson12;

/**
 * Реализуйте классы Тарелка (максимальное количество еды, текущее количество еды) и Кот (имя, аппетит).
 * Количество еды измеряем в условных единицах.
 * При создании тарелки указывается ее объем и она полностью заполняется едой
 * В тарелке должен быть метод, позволяющий добавить еду в тарелку.
 * После добавления в тарелке не может оказаться еды больше максимума
 * В тарелке должен быть boolean метод уменьшения количества еды, при этом после такого уменьшения,
 * в тарелке не может оказаться отрицательное количество еды (если удалось уменьшить еду так,
 * чтобы в тарелке осталось >= 0 кусков еды, то возвращаем true, в противном случае - false).
 * Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны).
 * Если коту удалось покушать (хватило еды), сытость = true.
 * Считаем, что если коту мало еды в тарелке, то он её просто не трогает,
 * то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
 * Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и потом
 * вывести информацию о сытости котов в консоль.
 */
public class Main {
    public static void main(String[] args) {

        Plate plate = new Plate(25);
        Cat[] cats = {
                new Cat("Vasya", 13),
                new Cat("Businka", 7),
                new Cat("Arnold", 16),
                new Cat("Boris", 15)
        };
        for (Cat cat : cats) {
            cat.eat(plate);
        }
        System.out.println("*******************************************************");

        plate.info();
        plate.addFood(12);
        plate.addFood(5);
        plate.addFood(7);
        for (Cat cat : cats) {
            cat.eat(plate);
        }
        System.out.println("*******************************************************");

        plate.addFood(17);
        for (Cat cat : cats) {
            cat.eat(plate);
        }
        System.out.println("*******************************************************\n");

        plate.addFood(17);
        plate.addFood(1);
    }
}
